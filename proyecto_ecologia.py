# -*- coding: utf-8 -*-
"""Proyecto_Ecologia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hCgUbryUmD2SsMGET3t-f2G8piYvREYN

#Librerías
"""

import pandas as pd
import numpy as np

"""#Datos

## Cargar Datos

Se cargan los datos de las especies con las que se trabjara:

- lutzomyia
  - olmeca
  - cruciata
- aegypti
- Anopheles
  - albimanus
  - pseudopunctipennis
"""

from google.colab import drive
drive.mount('/content/drive')

"""### Lutzomyia"""

lutzomyia = pd.read_csv('/content/drive/MyDrive/Ecologia/Lutzomyia.csv'); lutzomyia

"""---

### Aedes
"""

aegypti = pd.read_csv('/content/drive/MyDrive/Ecologia/Aedes_aegypti.csv'); aegypti

"""---

### Anopheles
"""

albimanus =  pd.read_csv('/content/drive/MyDrive/Ecologia/Anopheles_albimanus.csv'); albimanus

pseudopunctipennis = pd.read_csv('/content/drive/MyDrive/Ecologia/Anopheles_pseudopunctipennis.csv'); pseudopunctipennis

"""## Limpieza de datos

- Nombre especie
- País México MX
- Insertidumbre <100
- Coordenadas
- Año/ eventday

**En segmento por año elimina los puntos iguales**

### Lutzomyia

#### **Columnas**

Nos quedamos con las columnas que se consideran importantes: *family, genus,verbatimScientificName, countryCode, locality, stateProvince, decimalLatitude,decimalLongitude, coordinateUncertaintyInMeters, elevation, year*
"""

lutzomyia.columns.values

lutzomyia = lutzomyia.loc[:, ['verbatimScientificName', 'countryCode',
                              'decimalLatitude','decimalLongitude', 'coordinateUncertaintyInMeters', 'year']]

"""---

#### **División de datos**

De acuerdo al artículo [4], el agente causal de la Leishmania mexicana es transmitido a humanos por la picadura del insecto vector Lutzomyia olmeca olmeca y  potencialmente también por  Lutzomyia cruciata, por lo cual el DatFrame se reducira a estas dos especies en base a la columna: *verbatimScientificName*
"""

lutzomyia.verbatimScientificName.unique()

olmeca =  lutzomyia[lutzomyia.verbatimScientificName == "Lutzomyia olmeca subsp. olmeca"]; olmeca

cruciata = lutzomyia[lutzomyia.verbatimScientificName == "Lutzomyia (Tricholateralis) cruciata"]; cruciata

"""---

#### **Olmeca**

- Datos nulos
"""

olmeca.isnull().sum()

"""---

- Segmentación por año

>[1970-1985)
>
>[1985-2000)
>
>[2000-2012)
>
>[2015-2024]
"""

min(olmeca.year), max(olmeca.year)

#no hay datos entre esa fecha
#olmeca_1970_1985 = olmeca[(olmeca.year >= 1970) & (olmeca.year < 1985)]

olmeca_1985_2000 = olmeca[(olmeca.year >= 1985) & (olmeca.year < 2000)]
olmeca_2000_2015 = olmeca[(olmeca.year >= 2000) & (olmeca.year < 2015)]

#no hay datos entre esa fecha
#olmeca_2015_2024 = olmeca[(olmeca.year >= 2015) & (olmeca.year < 2024)]

"""---

- Datos duplicados
"""

#hay datos nulos
olmeca_1985_2000.duplicated().unique()

olmeca_1985_2000 = olmeca_1985_2000.drop_duplicates()

#hay datos nulos
olmeca_2000_2015.duplicated().unique()

olmeca_2000_2015 = olmeca_2000_2015.drop_duplicates()

"""---

- Guardar en .csv
"""

olmeca.to_csv('olmeca.csv', index=False)
olmeca_1985_2000.to_csv('olmeca(1985-2000).csv', index=False)
olmeca_2000_2015.to_csv('olmeca(2000-2015).csv', index=False)

"""----

---

#### **Cruciata**

- Datos nulos
"""

cruciata.isnull().sum()

"""---

- Segmentación por año

>[1970-1985)
>
>[1985-2000)
>
>[2000-2012)
>
>[2015-2024]
"""

min(cruciata.year), max(cruciata.year)

#no hay datos entre esa fecha
#cruciata_1970_1985 = cruciata[(cruciata).year >= 1970) & (cruciata.year < 1985)]

cruciata_1985_2000 = cruciata[(cruciata.year >= 1985) & (cruciata.year < 2000)]
cruciata_2000_2015 = cruciata[(cruciata.year >= 2000) & (cruciata.year < 2015)]

#no hay datos entre esa fecha
#cruciata_2015_2024 = cruciata[(cruciata.year >= 2015) & (cruciata.year < 2024)]

"""---

- Datos duplicados
"""

#hay datos duplicados
cruciata_1985_2000.duplicated().unique()

cruciata_1985_2000 = cruciata_1985_2000.drop_duplicates()

# hay datos duplicados
cruciata_2000_2015.duplicated().unique()

cruciata_2000_2015 = cruciata_2000_2015.drop_duplicates()

"""---

- Guardar en .csv
"""

cruciata.to_csv('cruciata.csv', index=False)
cruciata_1985_2000.to_csv('cruciata(1985-2000).csv', index=False)
cruciata_2000_2015.to_csv('cruciata(2000-2015).csv', index=False)

"""---

### Aedes Aegypti

#### **Columnas**
"""

aegypti.columns.values

"""Vemos que tenemos los mismos valores nulos de la columna **year** y la columna **eventDate** por lo cual no podemos obtener el año de acuerdo a la fecha y por eso no se agrega esa columna"""

null_year = list(aegypti[aegypti.year.isnull() == True].index)
null_eventDate = list(aegypti[aegypti.eventDate.isnull() == True].index)

null_year == null_eventDate

aegypti = aegypti.loc[:, ['verbatimScientificName', 'countryCode','decimalLatitude','decimalLongitude',
                          'coordinateUncertaintyInMeters', 'year']]

"""---

#### **Datos de México**
"""

aegypti.countryCode.unique()

aegypti = aegypti[aegypti.countryCode == 'MX']; aegypti

"""---

#### **Datos faltantes**

Modificamos los valores nulos de la columna **coordinateUncertaintyInMeters** pensando en que fueron exactos al tomar las coordenadas.
"""

aegypti.coordinateUncertaintyInMeters = aegypti.coordinateUncertaintyInMeters.fillna(0)

aegypti

"""Ahora eliminamos las los registros que tienen valores nulos, en este caso y después del paso anterior, los únicos que se eliminan son los 51 datos que no contiene el año"""

aegypti.isnull().sum()

aegypti = aegypti.dropna()

aegypti

"""#### **Segmentación por año**

>[1970-1985)
>
>[1985-2000)
>
>[2000-2012)
>
>[2015-2024]
"""

#primero cambiamos el tipo de dato de float a entero
aegypti['year'] = aegypti['year'].astype(int)

min(aegypti.year), max(aegypti.year)

aegypti_1970_1985 = aegypti[(aegypti.year >= 1970) & (aegypti.year < 1985)]
aegypti_1985_2000 = aegypti[(aegypti.year >= 1985) & (aegypti.year < 2000)]
aegypti_2000_2015 = aegypti[(aegypti.year >= 2000) & (aegypti.year < 2015)]

#no hay datos entre esa fecha
#aegypti_2015_2024 = aegypti[(aegypti.year >= 2015) & (aegypti.year < 2024)]

"""---

#### **Datos duplicados**
"""

#no hay datos duplicados
aegypti_1970_1985.duplicated().unique()

#hay datos dubplicados
aegypti_1985_2000.duplicated().unique()

aegypti_1985_2000 = aegypti_1985_2000.drop_duplicates()

#hay datos duplicados
aegypti_2000_2015.duplicated().unique()

aegypti_2000_2015 = aegypti_2000_2015.drop_duplicates()

"""---

#### **Guardar en .csv**
"""

aegypti.to_csv('aegypti.csv', index=False)
aegypti_1970_1985.to_csv('aegypti(1970-1985).csv', index=False)
aegypti_1985_2000.to_csv('aegypti(1985-2000).csv', index=False)
aegypti_2000_2015.to_csv('aegypti(2000-2015).csv', index=False)

"""### Anopheles

  LIMPIAR

#### **Albimanus**

- Columnas
"""

albimanus.columns.values

albimanus = albimanus.loc[:, ['verbatimScientificName','decimalLatitude','decimalLongitude',
                              'coordinateUncertaintyInMeters', 'eventDate', 'year']]

"""---

- Selección de especie

Nos quedamos con aquellos datos donde en la columna **verbatimScientificName** contengan la palabra *albimanus*
"""

albimanus.verbatimScientificName.unique()

#case = False:  ignore la diferencias entre mayúsculas y minúsculas.
albimanus = albimanus[albimanus.verbatimScientificName.str.contains('albimanus', case=False)]

"""---

- Datos Nulos
"""

albimanus.isnull().sum()

"""Modificamos los valores nulos de la columna **coordinateUncertaintyInMeters** pensando en que fueron exactos al tomar las coordenadas."""

albimanus.coordinateUncertaintyInMeters = albimanus.coordinateUncertaintyInMeters.fillna(0)

albimanus.coordinateUncertaintyInMeters.unique()

"""Observamos que hay datos mayores a 100 en la incertidumbre, estos datos serán eliminados."""

albimanus = albimanus[albimanus.coordinateUncertaintyInMeters <= 100]

albimanus

"""---

- Modificar datos

En la sección anterior observamos que hay más datos nulos en la columna **year** que en la columna **eventDate**. Como el dato de año es importante para este trabajo se decide obtener este elemento de la columna **eventDate** con la finalidad de no perder demasiados datos.
"""

#observar formato
albimanus.eventDate.unique()

#borramos los datos nulos de eventDate

x = albimanus.eventDate
x = albimanus.eventDate([i[:4] for i in x])

albimanus[albimanus.eventDate.str]



